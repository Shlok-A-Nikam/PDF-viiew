//Takes multiple files as Command Line Arguments and print their inode //number(slip1 & 19)


#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        return 1;
    }

    struct stat fileStat;
    for (int i = 1; i < argc; i++) {
        if (stat(argv[i], &fileStat) == 0) {
            printf("File: %s, Inode: %ld\n", argv[i], fileStat.st_ino);
        } else {
            perror(argv[i]); // Print error if stat fails
        }
    }

    return 0;
}


Q2 
Write a C program that catches the ctrl-c (SIGINT) signal for the first time and display
the appropriate message and exits on pressing ctrl-c again slip 2 Q2


#include <stdio.h>
#include <signal.h>
#include <unistd.h>

void sigint_handler(int signum) {
    write(STDOUT_FILENO, "\nPress Ctrl + C again to exit\n", 30);
    signal(SIGINT, SIG_DFL); // Reset SIGINT to default behavior
}

int main() {
    signal(SIGINT, sigint_handler); // Set custom handler for SIGINT

    while (1) {
        printf("Hello\n");
        sleep(1); // Add a delay to make output readable
    }

    return 0;
}

Q3 
Print the type of file and inode number where file name accepted through Command Line slip 3 Q1 Slip 24 Q1

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>

void print_file_type(struct stat fileStat) {
    if (S_ISREG(fileStat.st_mode))
        printf("Regular File");
    else if (S_ISDIR(fileStat.st_mode))
        printf("Directory");
    else if (S_ISCHR(fileStat.st_mode))
        printf("Character Device");
    else if (S_ISBLK(fileStat.st_mode))
        printf("Block Device");
    else if (S_ISFIFO(fileStat.st_mode))
        printf("FIFO (Named Pipe)");
    else if (S_ISLNK(fileStat.st_mode))
        printf("Symbolic Link");
    else if (S_ISSOCK(fileStat.st_mode))
        printf("Socket");
    else
        printf("Unknown Type");
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        return 1;
    }

    struct stat fileStat;
    for (int i = 1; i < argc; i++) {
        if (stat(argv[i], &fileStat) == 0) {
            printf("File: %s\n", argv[i]);
            print_file_type(fileStat); // Print the file type
            printf(", Inode: %ld\n", fileStat.st_ino);
        } else {
            perror(argv[i]); // Print error if stat fails
        }
    }

    return 0;
}


Q4 /Write a C program to find whether a given files passed through
//command line arguments are present in current directory or not.
slip (4,18,13)

#include <stdio.h>
#include <unistd.h>
int main(int argc, char *argv[])
{
if(access(argv[1],F_OK)==0)
printf("File %s exists in current directory \n", argv[1]);
else
printf("File %s doesn't exist in current directory \n", argv[1]);
return 0;
}


Q5 read the current directory and display the name of the files, no of files in current directory (slip 5,17,21)

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() {
    DIR *dir;
    struct dirent *entry;
    int file_count = 0;

    // Open the current directory
    dir = opendir(".");
    if (dir == NULL) {
        perror("Unable to open directory");
        return 1;
    }

    printf("Files in the current directory:\n");

    // Read entries in the directory
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name); // Print the name of the file or directory
        file_count++;
    }

    // Close the directory
    closedir(dir);

    // Display the total number of files
    printf("\nTotal number of files: %d\n", file_count);

    return 0;
}


Q6 //Write a C Program that demonstrates redirection of standard output to a file.slip(7,22&25)


#include <stdio.h>
#include <stdlib.h>

int main() {
    // Redirect standard output to a file
    FILE *file = freopen("output.txt", "w", stdout);
    if (file == NULL) {
        perror("Error redirecting stdout");
        exit(1);
    }

    // Output that will be written to the file
    printf("This is the first line redirected to the file.\n");
    printf("This is the second line redirected to the file.\n");

    // Close the file
    fclose(file);

    return 0;
}

Q7 Write a C program that redirects standard output to a file output.txt. (use of dup and open system
call).(slip 8 Slip 11 Q2 Slip 25 Q2 )

#include<stdio.h>
#include<stdlib.h>
#include<fcntl.h>
#include<unistd.h>
void main(){
int fd;
fd = open("output.txt",O_CREAT| O_WRONLY, 0777);
close(STDOUT_FILENO);
dup(fd);
printf("this is some text to be printed on the screen\n");
printf("but it will be written to the file output.txt\n");
}

Q 8 //Write a program that illustrates how to execute two commands concurrently with a pipe
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>
int main()
{
int pfds[2];
char buf[80];
if(pipe(pfds)==-1){
perror("pipe failed");
exit(1);
}
if(!fork())
{
close(1);
dup(pfds[1]);
system ("ls -l");
}
else
{
printf("parent reading from pipe \n");
while(read(pfds[0],buf,80))
printf("%s \n" ,buf);
}
}

Slip 12
// Assignment 24 : Write a C program that print the exit status of a terminated child process
#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<stdlib.h>
int main()
{
int pid;
pid=fork();
if (pid<0)
{
printf("Fork Failed \n");
exit(1);
}
else if(pid==0)
{
execlp("/bin/ls","ls","-l",NULL); // Execute ls
}
else
{
wait(NULL);
printf("\nChild Complete");
exit(0);
}
}




Slip 13 & 20
// Assignment 28 : Write a C program that illustrates suspending and resuming processes using
signals
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
int main ()
{
int pid1;
int pid2;
pid1 = fork();
if (pid1 == 0) /* First child */
{
while (1) /* Infinite loop */
{
printf ("P1 is alive\n");
sleep (1);
}
}
pid2 = fork (); /* Second child */
if (pid2 == 0)
{
while (1) /* Infinite loop */
{
printf ("P2 is alive\n");
sleep (1);
}
}
sleep (3);
kill (pid1, SIGSTOP); /* Suspend first child */
sleep (3);
kill (pid1, SIGCONT); /* Resume first child */
sleep (3);
kill (pid1, SIGINT); /* Kill first child */
kill (pid2, SIGINT); /* Kill second child */
}

Slip 6 & 16
//Display all the files from current directory which are created in particular month

#include <stdio.h>
#include <dirent.h>
#include <sys/stat.h>
#include <time.h>
#include <string.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <month>\n", argv[0]);
        return 1;
    }

    DIR *dir = opendir(".");
    struct dirent *entry;
    struct stat fileStat;

    while ((entry = readdir(dir))) {
        stat(entry->d_name, &fileStat);
        if (strncmp(ctime(&fileStat.st_ctime) + 4, argv[1], 3) == 0) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);
    return 0;
}



|||||||||||||||||||||||||||20 MARKS||||||||||||||||||||||||||




Slip 8
// Assignment . Write a C program to Identify the type (Directory, character device, Block device,
//Regular file, FIFO or pipe, symbolic link or socket) of given file using stat() system call


#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

void identify_file_type(const char *filepath) {
    struct stat filestat;

    // Get file status
    if (stat(filepath, &filetat) == -1) {
        perror("Error using stat");
        return;
    }

    printf("File: %s\n", filepath);

    // Check file type using macros defined in <sys/stat.h>
    if (S_ISREG(filestat.st_mode)) {
        printf("Type: Regular file\n");
    } else if (S_ISDIR(filestat.st_mode)) {
        printf("Type: Directory\n");
    } else if (S_ISCHR(filestat.st_mode)) {
        printf("Type: Character device\n");
    } else if (S_ISBLK(filestat.st_mode)) {
        printf("Type: Block device\n");
    } else if (S_ISFIFO(filestat.st_mode)) {
        printf("Type: FIFO or pipe\n");
    } else if (S_ISLNK(filestat.st_mode)) {
        printf("Type: Symbolic link\n");
    } else if (S_ISSOCK(filestat.st_mode)) {
        printf("Type: Socket\n");
    } else {
        printf("Type: Unknown\n");
    }
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <filepath>\n", argv[0]);
        return 1;
    }

    identify_file_type(argv[1]);

    return 0;
}


