##############(SLIP1 & 19)

//Takes multiple files as Command Line Arguments and print their inode //number


#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        return 1;
    }

    struct stat fileStat;
    for (int i = 1; i < argc; i++) {
        if (stat(argv[i], &fileStat) == 0) {
            printf("File: %s, Inode: %ld\n", argv[i], fileStat.st_ino);
        } else {
            perror(argv[i]); // Print error if stat fails
        }
    }

    return 0;
}





########## Slip 2 & slip 14 Q2




//Write a C program to find file properties such as inode number, number of hard link,
//File permissions, File size, File access and modification time and so on of a given file
//using stat() system call.
#include<stdio.h>
#include<stdlib.h>
#include<sys/stat.h>
#include<sys/types.h>
#include<time.h>
#include<fcntl.h>
int main(int argc, char const *argv[])
{
if(argc != 2)
{fprintf(stderr, "usage : %s <filepath>\n", argv[0]);
return 1;
}
int file = open(argv[1], O_RDONLY);
if(file < 0)
{
fprintf(stderr, "error opening file\n");
return 1;
}
struct stat st;
if(fstat(file, &st) < 0)
{
fprintf(stderr, "error reading file info\n");
return 1;
}
printf("File Name is : %s \n", argv[1]);
printf("File size : %ld\n", st.st_size);
printf("Number of hard links : %d\n", st.st_nlink);
printf("File inode : %ld\n", st.st_ino);
printf("File Permissions : ");
printf(S_ISDIR(st.st_mode) ? "d" : "-");
printf((st.st_mode & S_IRUSR) ? "r" : "-");
printf((st.st_mode & S_IWUSR) ? "w" : "-");
printf((st.st_mode & S_IXUSR) ? "x" : "-");
printf((st.st_mode & S_IRGRP) ? "r" : "-");
printf((st.st_mode & S_IWGRP) ? "w" : "-");
printf((st.st_mode & S_IXGRP) ? "x" : "-");
printf((st.st_mode & S_IROTH) ? "r" : "-");printf((st.st_mode & S_IWOTH) ? "w" : "-");
printf((st.st_mode & S_IXOTH) ? "x" : "-");
printf("\n");
char timestr[50];
struct tm *modified_time = localtime(&st.st_mtime);
strftime(timestr, 80, "%b %d %l:%M %p", modified_time);
printf("Modified time : %s\n", timestr);
struct tm *access_time = localtime(&st.st_atime);
strftime(timestr, 80, "%b %d %l:%M %p", access_time);
printf("Access time : %s\n", timestr);
return 0;
}
/*OUTPUT
scos@localhost:~/aos$ gcc ass3.c
scos@localhost:~/aos$ ./a.out ass5.c
File Name is : ass5.c
File size : 483
Number of hard links : 1
File inode : 5117212
File Permissions : -rw-r--r--
Modified time : Oct 13 4:45 PM
Access time : Oct 13 4:45 PM
*/


###########SLIP 3 Q1 SLIP 24 Q1





Print the type of file and inode number where file name accepted through Command Line 

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>

void print_file_type(struct stat fileStat) {
    if (S_ISREG(fileStat.st_mode))
        printf("Regular File");
    else if (S_ISDIR(fileStat.st_mode))
        printf("Directory");
    else if (S_ISCHR(fileStat.st_mode))
        printf("Character Device");
    else if (S_ISBLK(fileStat.st_mode))
        printf("Block Device");
    else if (S_ISFIFO(fileStat.st_mode))
        printf("FIFO (Named Pipe)");
    else if (S_ISLNK(fileStat.st_mode))
        printf("Symbolic Link");
    else if (S_ISSOCK(fileStat.st_mode))
        printf("Socket");
    else
        printf("Unknown Type");
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        return 1;
    }

    struct stat fileStat;
    for (int i = 1; i < argc; i++) {
        if (stat(argv[i], &fileStat) == 0) {
            printf("File: %s\n", argv[i]);
            print_file_type(fileStat); // Print the file type
            printf(", Inode: %ld\n", fileStat.st_ino);
        } else {
            perror(argv[i]); // Print error if stat fails
        }
    }

    return 0;
}



############slip (4,18,13)





Q4 /Write a C program to find whether a given files passed through
//command line arguments are present in current directory or not.

#include <stdio.h>
#include <unistd.h>
int main(int argc, char *argv[])
{
if(access(argv[1],F_OK)==0)
printf("File %s exists in current directory \n", argv[1]);
else
printf("File %s doesn't exist in current directory \n", argv[1]);
return 0;
}





###########(slip 5,17,21)





Q5 read the current directory and display the name of the files, no of files in current directory 

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() {
    DIR *dir;
    struct dirent *entry;
    int file_count = 0;

    // Open the current directory
    dir = opendir(".");
    if (dir == NULL) {
        perror("Unable to open directory");
        return 1;
    }

    printf("Files in the current directory:\n");

    // Read entries in the directory
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name); // Print the name of the file or directory
        file_count++;
    }

    // Close the directory
    closedir(dir);

    // Display the total number of files
    printf("\nTotal number of files: %d\n", file_count);

    return 0;
}




########Slip 6 , 16





//Display all the files from current directory which are created in particular month
#include<stdio.h>
#include<dirent.h>
#include<string.h>
#include<sys/stat.h>
#include<time.h>
#include<stdlib.h>
int main(int argc, char *argv[])
{
char in[100],st[100],*ch,*ch1,c,buff[512];
DIR *dp;
int i;
struct dirent *ep;
struct stat sb;
char mon[100];
dp=opendir("./");
if (dp != NULL)
{
while(ep =readdir(dp))
{
if(stat(ep->d_name,&sb) == -1)
{
perror("stat");
exit(EXIT_SUCCESS);
}
strcpy(mon,ctime(&sb.st_ctime));ch=strtok(mon," ");
ch=strtok(NULL,",");
ch1=strtok(ch," ");
if((strcmp(ch1,argv[1]))==0)
{
printf("%s\t\t%s",ep->d_name,ctime(&sb.st_ctime));
}
}
(void)closedir(dp);
}
return 0;
}
/*Output :
[root@localhostUnix]# cc month.c
[root@localhostUnix]# ./a.out Mar
a.out Fri Mar 20 22:15:23 2020
. Fri Mar 20 22:15:23 2020
.. Fri Mar 20 22:14:29 2020
*/



####### Slip 7 22 25




//Write a C Program that demonstrates redirection of standard output to a file.


#include <stdio.h>
#include <stdlib.h>

int main() {
    // Redirect standard output to a file
    FILE *file = freopen("output.txt", "w", stdout);
    if (file == NULL) {
        perror("Error redirecting stdout");
        exit(1);
    }

    // Output that will be written to the file
    printf("This is the first line redirected to the file.\n");
    printf("This is the second line redirected to the file.\n");

    // Close the file
    fclose(file);

    return 0;
}
 
 
 
########(slip 8 Slip 11 Q2 Slip 25 Q2 )




Q7 Write a C program that redirects standard output to a file output.txt. (use of dup and open system
call).

#include<stdio.h>
#include<stdlib.h>
#include<fcntl.h>
#include<unistd.h>
void main(){
int fd;
fd = open("output.txt",O_CREAT| O_WRONLY, 0777);
close(STDOUT_FILENO);
dup(fd);
printf("this is some text to be printed on the screen\n");
printf("but it will be written to the file output.txt\n");
}





###############Slip 9







//Generate parent process to write unnamed pipe and will read from it
#include<stdio.h>
#include<unistd.h>
int main() {
int pipefds[2];
int returnstatus;
int pid;
char writemessages[1][20]={"Hello"};
char readmessage[20];
returnstatus = pipe(pipefds);
if (returnstatus == -1)
{
printf("Unable to create pipe\n");return 1;
}
pid = fork();
// Child process
if (pid == 0)
{
read(pipefds[0], readmessage, sizeof(readmessage));
printf("Child Process - Reading from pipe â€“ Message is %s\n", readmessage);
}
else
{ //Parent process
printf("Parent Process - Writing to pipe - Message is %s\n", writemessages[0]);
write(pipefds[1], writemessages[0], sizeof(writemessages[0]));
}
return 0;
}





###############Slip 10







//Write a program that illustrates how to execute two commands concurrently with a pipe
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>
int main()
{
int pfds[2];
char buf[80];
if(pipe(pfds)==-1){
perror("pipe failed");
exit(1);
}
if(!fork())
{
close(1);
dup(pfds[1]);
system ("ls -l");
}
else
{
printf("parent reading from pipe \n");
while(read(pfds[0],buf,80))
printf("%s \n" ,buf);
}
}




##############Slip 11





//Assignment 22 : Write a C program to get and set the resource limits such as files, memory associated with a process
#include <stdio.h>
#include <sys/resource.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>#include <fcntl.h>
int main()
{
struct rlimit old_lim, lim, new_lim;
// Get old limits
if( getrlimit(RLIMIT_NOFILE, &old_lim) == 0)
printf("Old limits -> soft limit= %ld \t" " hard limit= %ld \n",old_lim.rlim_cur,
old_lim.rlim_max);
else
fprintf(stderr, "%s\n", strerror(errno));
// Set new value
lim.rlim_cur = 5;
lim.rlim_max = 1024;
// Set limits
if(setrlimit(RLIMIT_NOFILE, &lim) == -1)
fprintf(stderr, "%s\n", strerror(errno));
// Get new limits
if( getrlimit(RLIMIT_NOFILE, &new_lim) == 0)
printf("New limits -> soft limit= %ld " "\t hard limit= %ld \n",
new_lim.rlim_cur,new_lim.rlim_max);
else
fprintf(stderr, "%s\n", strerror(errno));
return 0;
}



################Slip 12###################




// Assignment 24 : Write a C program that print the exit status of a terminated child process
#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<stdlib.h>
int main()
{
int pid;
pid=fork();
if (pid<0)
{
printf("Fork Failed \n");
exit(1);
}
else if(pid==0)
{
execlp("/bin/ls","ls","-l",NULL); // Execute ls
}
else
{
wait(NULL);
printf("\nChild Complete");
exit(0);
}
}



##################Slip 13 & 20





// Assignment 28 : Write a C program that illustrates suspending and resuming processes using signals
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
int main ()
{
int pid1;
int pid2;
pid1 = fork();
if (pid1 == 0) /* First child */
{
while (1) /* Infinite loop */
{
printf ("P1 is alive\n");
sleep (1);
}
}
pid2 = fork (); /* Second child */
if (pid2 == 0)
{
while (1) /* Infinite loop */
{
printf ("P2 is alive\n");sleep (1);
}
}
sleep (3);
kill (pid1, SIGSTOP); /* Suspend first child */
sleep (3);
kill (pid1, SIGCONT); /* Resume first child */
sleep (3);
kill (pid1, SIGINT); /* Kill first child */
kill (pid2, SIGINT); /* Kill second child */
}




##############Slip 14 & 15








//Assignment 10: Display all the files from current directory whose size is greater that n Bytes Where
n is accept from user.
#include <stdio.h>
#include <dirent.h>
#include<string.h>
#include<unistd.h>
#include<time.h>
#include<sys/stat.h>
#include<sys/types.h>
#include<stdlib.h>
void main(int argc, char **argv)
{struct dirent *de;
struct stat fstat;
struct tm *timeinfo;
if(argc != 2)
{
printf("no size value passed\n");
exit(1);
}
int size = atoi(argv[1]);
if(size <0)
{
printf("invalid size value : size should be non negative\n");
exit(1);
}
DIR *directory = opendir(".");
char **filenames;
if (directory == NULL)
{
printf("Could not open current directory" );
return;
}
while ((de = readdir(directory)) != NULL)
if(strcmp(de->d_name,".") != 0 && strcmp(de->d_name,".."))
{
stat(de->d_name,&fstat);
if(fstat.st_size > size)
{printf("%s\n",de->d_name );
}
}
closedir(directory);
}
/*Output
[root@localhostUnix]# cc month.c
[root@localhostUnix]# ./a.out Mar
a.out Fri Mar 20 22:15:23 2020
. Fri Mar 20 22:15:23 2020
.. Fri Mar 20 22:14:29 2020
*/



